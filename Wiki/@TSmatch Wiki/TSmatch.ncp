<Project>
  <Name>TSmatch</Name>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Bootstrap</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Document</Name>
        <Access>Public</Access>
        <Location left="344" top="709" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">string name</Member>
        <Member type="Field">Matrix Body</Member>
        <Member type="Field">List&lt;Document&gt; Documents</Member>
        <Member type="Method">public void Start()</Member>
        <Member type="Method">public Document getDoc()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>TeklaOpenAPI</Name>
        <Access>Public</Access>
        <Location left="1149" top="75" />
        <Size width="194" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Method">publicList&lt;AttSet&gt; Read()</Member>
        <Member type="Method">public string GetTeklaDir()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Comment">
        <Text>BOOTSTRAP</Text>
        <Location left="440" top="12" />
        <Size width="95" height="50" />
      </Entity>
      <Entity type="Comment">
        <Text>Модуль Bootstrap производит начальный запуск TSmatch:
1. проверяет язык, используемый в Windows, и в зависимости от полученного значения работает с русскими или с английскими сообщениями и формами.
2. проверяет целостность системы, то есть наличие файлов TSmatch  в среде Tekla. Для этого Bootstrap обращается к Tekla.getDirectory(), а если Tekla не 
    активна - пытается открыть TSmatch.xlsx из текущей директории.
3. Если какого-либо компонента из пункта выше нет, то есть setup системы не завершен - пытается скопировать нужные файлы из ZIP.
4. запускает инициализацию модулей Messages, Documents, затем Models, Rules, Suppliers</Text>
        <Location left="369" top="991" />
        <Size width="820" height="106" />
      </Entity>
      <Entity type="Class">
        <Name>Bootstrap</Name>
        <Access>Public</Access>
        <Location left="573" top="108" />
        <Size width="187" height="162" />
        <Collapsed>False</Collapsed>
        <Member type="Method">private bool HealthChek()</Member>
        <Member type="Method">public void readZip(string name)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Message</Name>
        <Access>Public</Access>
        <Location left="53" top="542" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public List&lt;Message&gt; Messages</Member>
        <Member type="Method">public void Start()</Member>
        <Member type="Method">public void F(string err, object p0, object p1, object p2)</Member>
        <Member type="Method">public void W(string err, object p0, object p1, object p2)</Member>
        <Member type="Method">public void I(string err, object p0, object p1, object p2)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Supplier</Name>
        <Access>Public</Access>
        <Location left="585" top="709" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public void Start()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Rules</Name>
        <Access>Public</Access>
        <Location left="832" top="710" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public void Start()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Model</Name>
        <Access>Public</Access>
        <Location left="1034" top="710" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public void Start()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Comment">
        <Text>30.3.2016</Text>
        <Location left="10" top="12" />
        <Size width="74" height="50" />
      </Entity>
      <Entity type="Comment">
        <Text>METHOD: bool HealthCheck()
возвращает true, когда есть все нужные файлы Resource и они актуальны. Для этого проверяется наличие нужных файлов и их даты по таблице из Declaration</Text>
        <Location left="798" top="229" />
        <Size width="319" height="75" />
      </Entity>
      <Entity type="Class">
        <Name>Resource</Name>
        <Access>Public</Access>
        <Location left="10" top="307" />
        <Size width="203" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">staticList&lt;Resource&gt; Resources</Member>
        <Member type="Field">string type</Member>
        <Member type="Field">string name</Member>
        <Member type="Field">DateTime date</Member>
        <Member type="Method">private bool checkResource(string name)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Template</Name>
        <Access>Public</Access>
        <Location left="122" top="47" />
        <Size width="206" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">readonly string template</Member>
        <Member type="Field">readonly string templ_value</Member>
        <Member type="Field">static List&lt;TemplateVal&gt; TemplateVals</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Dependency" first="4" second="1">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Dependency" first="4" second="5">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Dependency" first="4" second="0">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Dependency" first="4" second="6">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Dependency" first="4" second="7">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Dependency" first="4" second="8">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Dependency" first="4" second="11">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Start_Suppliers,Rules,Models</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Model</Name>
        <Access>Public</Access>
        <Location left="912" top="85" />
        <Size width="190" height="281" />
        <Collapsed>False</Collapsed>
        <Member type="Field">string name</Member>
        <Member type="Field">DateTime date</Member>
        <Member type="Field">string dir</Member>
        <Member type="Field">List&lt;Rule&gt; rules</Member>
        <Member type="Field">string strListRules</Member>
        <Member type="Field">string Made</Member>
        <Member type="Field">string MD5</Member>
        <Member type="Field">List&lt;Supplier&gt; Suppliers</Member>
        <Member type="Method">public Model getModel(string name)</Member>
        <Member type="Method">private void setModel(Model mod)</Member>
        <Member type="Method">public void saveModel()</Member>
        <Member type="Method">public static Model UpdateFrTekla()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Rule</Name>
        <Access>Public</Access>
        <Location left="566" top="95" />
        <Size width="191" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">string name</Member>
        <Member type="Field">string text</Member>
        <Member type="Field">string made</Member>
        <Member type="Field">Supplier Supplier</Member>
        <Member type="Field">CompSet CompSet</Member>
        <Member type="Method">public void UseRules(Model mod)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Document</Name>
        <Access>Public</Access>
        <Location left="87" top="659" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">string name</Member>
        <Member type="Field">Matrix Body</Member>
        <Member type="Method">public Document getDoc()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Supplier</Name>
        <Access>Public</Access>
        <Location left="150" top="84" />
        <Size width="212" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">string name</Member>
        <Member type="Field">public hyperlink URL</Member>
        <Member type="Field">public string City</Member>
        <Member type="Field">public List&lt;CompSet&gt; CompSets</Member>
        <Member type="Field">public List&lt;string&gt; doc_names</Member>
        <Member type="Method">public Supplier getSupplier(string name)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>CompSet</Name>
        <Access>Public</Access>
        <Location left="363" top="402" />
        <Size width="225" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public string name</Member>
        <Member type="Field">Document doc</Member>
        <Member type="Field">Component Comp</Member>
        <Member type="Method">public CompSet getCompSet(string name)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Comment">
        <Text>При начальной инициализации классов Supplier, CompSet, Rule, Model (как и служебных классов Message, Documens, Samp, Form), происходит чтение файла общего "диспетчерского" файла TSmatch.xlsx и его интерпретация. Все другие файлы, в частности - многочисленные прайс-листы Поставщиков из "Базы комплектующих", не читаются, чтобы не загромождать память программы ненужными данными. Эти данные будут прочитаны позже (см.диаграмму Handle Model) лишь в том случае, когда это необходимо для работы с выбранной моделью.

Статические коллекции:
* Suppliers - списки всех Поставщиков
* Models - Журнал известных моделей
* Rules - список всех правил

Каждый Supplier содержит списки имен документов doc_names и список CompSets - коллекцию наборов компонентов той же длинны, что список имен документов

Каждая модель в Журнале содержит перечень относящихся к ней правил, а также набор поставщиков и  перечень прайс-листов CompSet соответствующих правилам.

Таким образом, каждое правило должно содержать необходимые данные о поставщиках для того, чтобы можно было инициализировать список моделей.

Цель этого этапа работы TSmatch - подготовить все необходимое для дальнейшей работы, занимая при этом лишь минимально необходимые ресурсы - время, оперативную память и место на экране компьютера.

Однако, уже этот подготовительный этап позволяет выбрать модель из журнала моделей в TSmatch и приступить к ее чтению из файловой системы и обработке, или прочитать модель из Tekla Structures.

Все ощибки TSmatch на этом эатапе работы - внутренние ошибки системы, они, обычно, связаны с несоблюдением целостности системы при занесении новых данных - документов Поставщиков.</Text>
        <Location left="703" top="402" />
        <Size width="582" height="460" />
      </Entity>
      <Entity type="Comment">
        <Text>ИНИЦИАЛИЗАЦИЯ TSmatch</Text>
        <Location left="406" top="10" />
        <Size width="160" height="50" />
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Association" first="0" second="1">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>0..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="1" second="3">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="3" second="4">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Composition</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>0..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="3" second="2">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
        <StartRole>nothing but doc_names ai init</StartRole>
        <StartMultiplicity>0..*</StartMultiplicity>
        <EndMultiplicity>0..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Dependency" first="3" second="2">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Handle Model</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Model</Name>
        <Access>Public</Access>
        <Location left="912" top="85" />
        <Size width="190" height="281" />
        <Collapsed>False</Collapsed>
        <Member type="Field">string name</Member>
        <Member type="Field">DateTime date</Member>
        <Member type="Field">string dir</Member>
        <Member type="Field">List&lt;Rule&gt; rules</Member>
        <Member type="Field">string strListRules</Member>
        <Member type="Field">string Made</Member>
        <Member type="Field">string MD5</Member>
        <Member type="Field">List&lt;Supplier&gt; Suppliers</Member>
        <Member type="Method">public Model getModel(string name)</Member>
        <Member type="Method">private void setModel(Model mod)</Member>
        <Member type="Method">public void saveModel()</Member>
        <Member type="Method">public static Model UpdateFrTekla()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Component</Name>
        <Access>Public</Access>
        <Location left="727" top="677" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">string description</Member>
        <Member type="Field">double length</Member>
        <Member type="Field">double weight</Member>
        <Member type="Field">double price</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Rule</Name>
        <Access>Public</Access>
        <Location left="566" top="95" />
        <Size width="191" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">string name</Member>
        <Member type="Field">string text</Member>
        <Member type="Field">string made</Member>
        <Member type="Field">Supplier Supplier</Member>
        <Member type="Field">CompSet CompSet</Member>
        <Member type="Method">public void UseRules(Model mod)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>TeklaOpenAPI</Name>
        <Access>Public</Access>
        <Location left="1169" top="95" />
        <Size width="194" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Method">publicList&lt;AttSet&gt; Read()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Document</Name>
        <Access>Public</Access>
        <Location left="87" top="659" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">string name</Member>
        <Member type="Field">Matrix Body</Member>
        <Member type="Method">public Document getDoc()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Supplier</Name>
        <Access>Public</Access>
        <Location left="150" top="84" />
        <Size width="212" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">string name</Member>
        <Member type="Field">public hyperlink URL</Member>
        <Member type="Field">public string City</Member>
        <Member type="Field">public List&lt;CompSet&gt; CompSets</Member>
        <Member type="Field">public List&lt;string&gt; doc_names</Member>
        <Member type="Method">public Supplier getSupplier(string name)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>CompSet</Name>
        <Access>Public</Access>
        <Location left="363" top="402" />
        <Size width="225" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public string name</Member>
        <Member type="Field">Document doc</Member>
        <Member type="Field">Component Comp</Member>
        <Member type="Method">public CompSet getCompSet(string name)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Comment">
        <Text>ОБРАБОТКА МОДЕЛИ</Text>
        <Location left="428" top="7" />
        <Size width="133" height="50" />
      </Entity>
      <Entity type="Comment">
        <Text>Конкретная модель для обработки должна быть выбрана из "Журнала моделей" и прочитана из файловой системы readModel() или прочитана из Tekla.OpenAPI.Read()

При этом:
1. setModel(name) заполняет нужные для обработки модели данные, отсутствующие после инициализации - читает нужные прайс-листы из Базы комплектующих.
После подготовки запускается метод UseRules(mod) 

2. saveModel() сохраняет прочитанную и обработанную модель в файле TSmatchINFO.xlsx в папке модели.
    2.1 Лист ModelINFO - общая информация о модели: имя, стадия проекта, место каталога на диске, MD5,  список
          использованных Правил
    2.2 Лист Raw - полный список всех прочитанных из модели данных по всем элементам - еще "сырой" - не обработанный.
    2.3 Лист Report - Элементы из Raw сгруппированы по значениям Материала и Профиля (Groups). Для каждой группы 
          подбирается, если возможно, соответвующий компонент - строчка в прайс-листе CompSet с использованием одного из 
          правил модели.
    2.4 Лист Suppliers - перечень Поставщиков по данной модели с указанимем суммарных объемов закупаемых стали и бетона, 
          а также цена по этим объемам материалов.</Text>
        <Location left="678" top="389" />
        <Size width="685" height="266" />
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Dependency" first="3" second="0">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="0" second="2">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>0..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="2" second="5">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="6" second="1">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Composition</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="6" second="4">
        <Label>fill Comp at getCompSet</Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
        <StartRole>doc_name at init</StartRole>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="5" second="6">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Composition</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>0..*</EndMultiplicity>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>FinderPrint</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Comment">
        <Text>1.1.2017
Pavel Khrapkin</Text>
        <Location left="12" top="11" />
        <Size width="97" height="50" />
      </Entity>
      <Entity type="Class">
        <Name>FingerPrint</Name>
        <Access>Public</Access>
        <Location left="47" top="91" />
        <Size width="398" height="213" />
        <Collapsed>False</Collapsed>
        <Member type="Field">readonly int type</Member>
        <Member type="Field">readonly List&lt;string&gt; txs</Member>
        <Member type="Field">readonly Dictionary&lt;string,string&gt; pars</Member>
        <Member type="Field">readonly Dicionary&lt;string,string&gt; synonyms</Member>
        <Member type="Field">readonly List&lt;string&gt; must</Member>
        <Member type="Constructor">public FingerPrint(bool type, List&lt;string&gt; _txs, Dictionary&lt;string,string&gt; _pars)</Member>
        <Member type="Method">public FingerPrint setFPfrStr(string str)</Member>
        <Member type="Method">public bool isFpMtch(FingerPrint other)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Comment">
        <Text>FingerPrint (FP) - класс "отпечатков пальцев". Он представляет собой набор фрагментов текста str параметров, характеризующих объект, которому принадлежит - атрибут элемента модели с САПР, Component - стрчку из прайс-листа поставщика, или Правило, определяющее соответствие между элементом и Компонентом. </Text>
        <Location left="23" top="332" />
        <Size width="307" height="116" />
      </Entity>
      <Entity type="Comment">
        <Text>Поле enum type {Rule, ElmAttSet, Component} определят поведение при идентификации по FingerPrint:
FP может быть "образцовым" - Sample, и "действительным" - Actual.
Actual может содержать большее количество деталей - txs и pars по сравнению с Sample. Признак bool Sample и перечень обязательных параметров содержатся в List&lt;string&gt;must.
Необязательные параметры (то есть не упомянутые в mast) в Actual игнорируются. Также игнорируются фрагменты текста, если они не упомянуты в txs Sample.
Но если в Actual отсутствует один из фрагментов txs Sample -&gt; результат идентификации в isFpMatch отрицательный.
Rule, обычно, задает Образец, то есть играет роль Sample.
Component или ElmAttSet - Actual. Устанавливать ли между ними соответствие (идентифицировать ли?), определяется текстом Правила, и, как результат этого текста - совокупностью txs, pars, must Rule.FP.</Text>
        <Location left="23" top="469" />
        <Size width="398" height="231" />
      </Entity>
      <Entity type="Comment">
        <Text>Equals вместо  bool isFpMtch(other)

Для класса FingerPrint реализовано свойство IEquatable, то есть написан метод сравнения двух FP. Если один из них Rule, то срасвниваются txs и обязательные параметры.
Таким образом, можно проводить идентификацию
    if(A.Equals(B))</Text>
        <Location left="23" top="719" />
        <Size width="396" height="115" />
      </Entity>
      <Entity type="Class">
        <Name>SectionFP</Name>
        <Access>Internal</Access>
        <Location left="515" top="91" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">readonly int name</Member>
        <Member type="Field">readonly string pattern</Member>
        <Member type="Field">FingerPrint fp</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Comment">
        <Text>class SectionFP { enum name, string pattern; FP fp; } - класс "прообраза FP"

, List&lt;SectionFP&gt; SectionFPs обрабатывается в Rule.Parser() через ref, то есть по входной текстовой строке распознаются Секции, их параметры заполняют FP fp; Затем, уже после Parser, данные из FP fp надо переложить в Rule, Component или ElmAttSet, распознав по SectionFP.name куда именно нужно перекладывать данные - в matFP, в prfFP, или в другие секции Component, что необходимо для отображения прайс-листа. 
[ ] похоже, Parser(type, text,List&lt;SectionFP&gt;SectionFPs) можно оставить в Rule, а вот для перекладывания в instance Rule, Component или ElmAttSet нужны методы PostParser(SectionFPs) в каждом из трех классов. Впрочем, PostParser код можно оставить в RuleParser, если в SectionFPs окажется достаточно информации для раскладки в matFP и prfFP.
[ ] enum name может быть такой "достаточной информацией", например, if(SectionFP.name.ToString() == "Material")..
[X] publicenumtype { Rule, [ ]  ИДЕЯ: создать class SectionFP { enum name, string pattern; FP fp; }, List&lt;SectionFP&gt; SectionFPs обрабатывается в Rule.Parser() через ref, то есть по входной текстовой строке распознаются Секции, их параметры заполняют FP fp; Затем, уже после Parser, данные из FP fp надо переложить в Rule, Component или ElmAttSet, распознав по SectionFP.name куда именно нужно перекладывать данные - в matFP, в prfFP, или в другие секции Component, что необходимо для отображения прайс-листа. 
[ ] похоже, Parser(type, text,List&lt;SectionFP&gt;SectionFPs) можно оставить в Rule, а вот для перекладывания в instance Rule, Component или ElmAttSet нужны методы PostParser(SectionFPs) в каждом из трех классов. Впрочем, PostParser код можно оставить в RuleParser, если в SectionFPs окажется достаточно информации для раскладки в matFP и prfFP.
[ ] enum name может быть такой "достаточной информацией", например, if(SectionFP.name.ToString() == "Material")..
[X] publicenumtype { Rule, ElmAttSet, Component } тоже остается в FingerPrint
</Text>
        <Location left="503" top="332" />
        <Size width="476" height="515" />
      </Entity>
      <Entity type="Class">
        <Name>Rule</Name>
        <Access>Public</Access>
        <Location left="785" top="13" />
        <Size width="347" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">readonly List&lt;SectionFP&gt; sectionFPs</Member>
        <Member type="Field">readonly string text</Member>
        <Member type="Field">readonly Supplier Supplier</Member>
        <Member type="Field">readonly CompSet CompSet</Member>
        <Member type="Field">readonly FingerPrint matFP</Member>
        <Member type="Field">readonly FingerPrint prfFP</Member>
        <Member type="Method">internal void Parser(int type, string text, List&lt;SectionFP&gt; sectionFPs)</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
</Project>